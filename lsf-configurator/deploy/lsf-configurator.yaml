apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: configurator-role
rules:
  # Knative Serving API
  - apiGroups: ["serving.knative.dev"]
    resources: ["*"]
    verbs: ["*"]

  # Kubernetes Core API (pods, services, configmaps, secrets, etc.)
  - apiGroups: [""]
    resources: ["pods", "services"]
    verbs: ["get", "list", "watch", "create", "update", "delete"]

  # Kubernetes Apps API (deployments, statefulsets, daemonsets)
  - apiGroups: ["apps"]
    resources: ["deployments", "statefulsets", "daemonsets"]
    verbs: ["get", "list", "watch", "create", "update", "delete"]

  # Tekton Pipelines API (allow managing PipelineRuns and related resources)
  - apiGroups: ["tekton.dev"]
    resources:
      [
        "pipelineruns",
        "pipelineruns/finalizers",
        "pipelineruns/status",
        "taskruns",
        "taskruns/finalizers",
        "taskruns/status",
      ]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: configurator-sa
  namespace: configurator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: configurator-rolebinding
subjects:
  - kind: ServiceAccount
    name: configurator-sa
    namespace: configurator
roleRef:
  kind: ClusterRole
  name: configurator-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sqlite-pvc
  namespace: configurator
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lsf-configurator-deployment
  namespace: configurator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: lsf-configurator
  template:
    metadata:
      labels:
        app: lsf-configurator
    spec:
      serviceAccountName: configurator-sa
      terminationGracePeriodSeconds: 300
      containers:
        - name: lsf-configurator
          image: szaboegon/lsf-configurator:latest
          securityContext:
            privileged: true
          ports:
            - containerPort: 8080
          resources:
            requests:
              cpu: "2000m"
              memory: "1024Mi"
            limits:
              cpu: "3000m"
              memory: "3072Mi"
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 3
            periodSeconds: 2
          env:
            - name: UPLOAD_DIR
              value: "/uploads"
            - name: IMAGE_REGISTRY
              value: "registry.hub.docker.com/szaboegon"
            - name: IMAGE_REPOSITORY
              value: "szaboegon"
            - name: TEMPLATES_PATH
              value: "file://templates"
            - name: REDIS_URL
              value: "redis-master.redis.svc.cluster.local:6379"
            - name: VERBOSE_LOGS
              value: "false"
            - name: METRICS_BACKEND_ADDRESS
              value: http://elasticsearch-es-http.observability.svc.cluster.local:9200
            - name: TEKTON_NAMESPACE
              value: "configurator"
            - name: TEKTON_PIPELINE
              value: "function-build-pipeline"
            - name: TEKTON_NOTIFY_URL
              value: http://lsf-configurator.configurator.svc.cluster.local:80/function_compositions/build_notify
            - name: TEKTON_WORKSPACE_PVC
              value: "uploads-pvc"
            - name: TEKTON_SERVICE_ACCOUNT
              value: "buildpacks-service-account"
            - name: TEKTON_CONCURRENCY_LIMIT
              value: "1"
            - name: DATABASE_PATH
              value: "/db/db.sqlite3"
            - name: ALERTING_API_URL
              value: "http://kibana-kb-http.observability.svc.cluster.local:5601"
            - name: ALERTING_USERNAME
              value: "elastic"
              # only for testing purposes
            - name: ALERTING_PASSWORD
              value: "elastic"
            - name: LOCAL_MODE
              value: "false"
            - name: CONTROLLER_TICK_DELAY_SECONDS
              value: "30"
            - name: PLATFORM_NODES
              value: "knative,knative-m02,knative-m03"
            - name: PLATFORM_DELAY_MS
              value: "10"
              # currently nodes have 6GB total RAM, we leave 2GB for system processes
            - name: AVAILABLE_NODE_MEMORY_GB
              value: "4"
          volumeMounts:
            - name: uploads-pvc
              mountPath: /uploads
            - name: db-sqlite
              mountPath: /db
      volumes:
        - name: uploads-pvc
          persistentVolumeClaim:
            claimName: uploads-pvc
        - name: db-sqlite
          persistentVolumeClaim:
            claimName: sqlite-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: lsf-configurator
  namespace: configurator
spec:
  type: NodePort
  selector:
    app: lsf-configurator
  ports:
    - port: 80
      targetPort: 8080
      nodePort: 30001
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: sqlite-web
#   namespace: configurator
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: sqlite-web
#   template:
#     metadata:
#       labels:
#         app: sqlite-web
#     spec:
#       containers:
#         - name: sqlite-web
#           image: coleifer/sqlite-web:latest
#           command: ["sqlite_web"]
#           args: ["--host", "0.0.0.0", "--port", "8080", "/db/db.sqlite3"]
#           ports:
#             - containerPort: 8080
#           volumeMounts:
#             - name: db-sqlite
#               mountPath: /db
#       volumes:
#         - name: db-sqlite
#           persistentVolumeClaim:
#             claimName: sqlite-pvc
#       affinity:
#         podAffinity:
#           requiredDuringSchedulingIgnoredDuringExecution:
#             - labelSelector:
#                 matchLabels:
#                   app: lsf-configurator
#               topologyKey: "kubernetes.io/hostname"
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: sqlite-web
#   namespace: configurator
# spec:
#   selector:
#     app: sqlite-web
#   ports:
#     - port: 8080
#       targetPort: 8080
#       protocol: TCP
#   type: NodePort

