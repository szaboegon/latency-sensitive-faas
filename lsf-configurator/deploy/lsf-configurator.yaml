apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: configurator-role
rules:
  # Knative Serving API
  - apiGroups: ["serving.knative.dev"]
    resources: ["*"]
    verbs: ["*"]

  # Kubernetes Core API (pods, services, configmaps, secrets, etc.)
  - apiGroups: [""]
    resources: ["pods", "services"]
    verbs: ["get", "list", "watch", "create", "update", "delete"]

  # Kubernetes Apps API (deployments, statefulsets, daemonsets)
  - apiGroups: ["apps"]
    resources: ["deployments", "statefulsets", "daemonsets"]
    verbs: ["get", "list", "watch", "create", "update", "delete"]

  # Tekton Pipelines API (allow managing PipelineRuns and related resources)
  - apiGroups: ["tekton.dev"]
    resources: ["pipelineruns", "pipelineruns/finalizers", "pipelineruns/status", "taskruns", "taskruns/finalizers", "taskruns/status"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: configurator-sa
  namespace: configurator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: configurator-rolebinding
subjects:
  - kind: ServiceAccount
    name: configurator-sa  
    namespace: configurator
roleRef:
  kind: ClusterRole
  name: configurator-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lsf-configurator-deployment
  namespace: configurator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: lsf-configurator
  template:
    metadata:
      labels:
        app: lsf-configurator
    spec:
      serviceAccountName: configurator-sa
      terminationGracePeriodSeconds: 300
      containers:
        - name: lsf-configurator
          image: szaboegon/lsf-configurator:latest
          securityContext:
            privileged: true
          ports:
            - containerPort: 8080
          resources:
            requests:
              cpu: "2000m"
              memory: "1024Mi"
            limits:
              cpu: "3000m"
              memory: "3072Mi"
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 3
            periodSeconds: 2
          env:
            - name: UPLOAD_DIR
              value: "/uploads"
            - name: IMAGE_REGISTRY
              value: "registry.hub.docker.com/szaboegon"
            - name: IMAGE_REPOSITORY
              value: "szaboegon"
            - name: TEMPLATES_PATH
              value: "file://templates"
            - name: REDIS_URL
              value: "redis-master.redis.svc.cluster.local:6379"
            - name: VERBOSE_LOGS
              value: "false"
            - name: METRICS_BACKEND_ADDRESS
              value: http://elasticsearch-es-http.observability.svc.cluster.local:9200
            - name: TEKTON_NAMESPACE
              value: "configurator"
            - name: TEKTON_PIPELINE
              value: "function-build-pipeline"
            - name: TEKTON_NOTIFY_URL
              value: http://lsf-configurator.configurator.svc.cluster.local:80/function_compositions/build_notify
            - name: TEKTON_WORKSPACE_PVC
              value: "uploads-pvc"
            - name: TEKTON_SERVICE_ACCOUNT
              value: "buildpacks-service-account"
            - name: DATABASE_PATH
              value: "/db/db.sqlite3"
          volumeMounts:
            - name: uploads-pvc
              mountPath: /uploads
            - name: db-sqlite
              mountPath: /db
      volumes:
        - name: uploads-pvc
          persistentVolumeClaim:
            claimName: uploads-pvc
        - name: db-sqlite
          hostPath:
            path: C:\\Users\\szabo\\source\\repos\\szaboegon\\latency-sensitive-faas\\lsf-configurator\\db
            type: DirectoryOrCreate
---
apiVersion: v1
kind: Service
metadata:
  name: lsf-configurator
  namespace: configurator
spec:
  type: NodePort
  selector:
    app: lsf-configurator
  ports:
  - port: 80
    targetPort: 8080
    nodePort: 30001


